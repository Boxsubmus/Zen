using System;

load "std/math.zen";

private fun void test()
{
    let b = 20;
    return;
} // Compiler error, doesn't need to exist.

public fun void Main()
{
    println("hello, world!");
    // println(scope $"2 + 2 = {add<int>(2, 2)}");
}

// Equivalent to `unsafe` in Rust, allows "untrustworthy" code.
trustme
{
    private class TestClass
    {
        public any a; // any is only allowed in untrustworthy contexts, equivalent to `dynamic` in C#.
        public float32 b;
    }

    private fun void untrustworthy()
    {
        var testClass = new TestClass();
        var testClassPtr = &testClass;

        testClassPtr.a = 0;
        testClassPtr.a = "bop";
    }
}

// yolo means a function can only be called once.
private fun void Yippy() yolo
{

}